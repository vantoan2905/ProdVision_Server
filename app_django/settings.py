# """
# Django settings for app_django project.

# Generated by 'django-admin startproject' using Django 5.2.5.
# """

# from pathlib import Path
# import dotenv
# import os

# BASE_DIR = Path(__file__).resolve().parent.parent

# SECRET_KEY = "django-insecure-r8xeoaads*caym*0a$8!xik5iu9z!cx9jppjb*f(j+ps63%6ic"

# DEBUG = True

# STATIC_URL = "/static/"
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static"),
# ]
# STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
# ALLOWED_HOSTS = []

# # ------------------------
# # Applications
# # ------------------------
# INSTALLED_APPS = [
#     "provision",

#     # Django built-in apps
#     "django.contrib.admin",
#     "django.contrib.auth",
#     "django.contrib.contenttypes",
#     "django.contrib.sessions",
#     "django.contrib.messages",
#     "django.contrib.staticfiles",
#     "django.contrib.sites",  # Required by allauth

#     # Allauth apps
#     "allauth",
#     "allauth.account",
#     "allauth.socialaccount",

#     # Social providers (optional - install only the ones you need)
#     "allauth.socialaccount.providers.google",
#     "allauth.socialaccount.providers.facebook",
#     # ... bạn có thể giữ nguyên list dài của bạn nếu thực sự dùng

#     # Third-party apps
#     "rest_framework",
#     "rest_framework_simplejwt",
#     "drf_yasg",
# ]

# SITE_ID = 1

# # ------------------------
# # REST Framework & JWT
# # ------------------------
# REST_FRAMEWORK = {
#     "DEFAULT_AUTHENTICATION_CLASSES": (
#         "rest_framework_simplejwt.authentication.JWTAuthentication",
#     ),
#     'EXCEPTION_HANDLER': 'provision.utils.custom_exception_handler.custom_exception_handler',
#     "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
#     "DEFAULT_VERSION": "v1",
#     "ALLOWED_VERSIONS": ["v1", "v2"],
#     "VERSION_PARAM": "version",
# }


# # ------------------------
# # Middleware
# # ------------------------
# MIDDLEWARE = [
#     "django.middleware.security.SecurityMiddleware",
#     "django.contrib.sessions.middleware.SessionMiddleware",
#     "django.middleware.common.CommonMiddleware",
#     "django.middleware.csrf.CsrfViewMiddleware",
#     "django.contrib.auth.middleware.AuthenticationMiddleware",
#     "django.contrib.messages.middleware.MessageMiddleware",
#     "django.middleware.clickjacking.XFrameOptionsMiddleware",
#     "allauth.account.middleware.AccountMiddleware",
# ]

# ROOT_URLCONF = "app_django.urls"

# # ------------------------
# # Templates
# # ------------------------
# TEMPLATES = [
#     {
#         "BACKEND": "django.template.backends.django.DjangoTemplates",
#         "DIRS": [],
#         "APP_DIRS": True,
#         "OPTIONS": {
#             "context_processors": [
#                 "django.template.context_processors.request",  # Required by allauth
#                 "django.contrib.auth.context_processors.auth",
#                 "django.contrib.messages.context_processors.messages",
#             ],
#         },
#     },
# ]

# # ------------------------
# # Authentication Backends
# # ------------------------
# AUTHENTICATION_BACKENDS = [
#     "django.contrib.auth.backends.ModelBackend",  # Default
#     "allauth.account.auth_backends.AuthenticationBackend",  # Allauth
# ]


# SWAGGER_SETTINGS = {
#     'SECURITY_DEFINITIONS': {
#         'Bearer': {
#             'type': 'apiKey',
#             'name': 'Authorization',
#             'in': 'header'
#         }
#     }
# }




# # ------------------------
# # Allauth settings
# # ------------------------
# LOGIN_REDIRECT_URL = "/swagger/"

# ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
# ACCOUNT_LOGIN_METHODS = ['email']


# SOCIALACCOUNT_PROVIDERS = {
#     "google": {
#         "APP": {
#             "client_id": "123",
#             "secret": "456",
#             "key": ""
#         }
#     }
# }

# WSGI_APPLICATION = "app_django.wsgi.application"

# # ------------------------
# # Load .env
# # ------------------------
# dotenv.load_dotenv()

# NAME_DB = os.getenv("POSTGRES_DB")
# USER_DB = os.getenv("POSTGRES_USER")
# PASSWORD_DB = os.getenv("POSTGRES_PASSWORD")
# HOST_DB = os.getenv("POSTGRES_HOST", "localhost")
# PORT_DB = os.getenv("POSTGRES_PORT", "5432")

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.postgresql",
#         "NAME": NAME_DB,
#         "USER": USER_DB,
#         "PASSWORD": PASSWORD_DB,
#         "HOST": HOST_DB,
#         "PORT": PORT_DB,
#     }
# }

# # ------------------------
# # Password validation
# # ------------------------
# AUTH_PASSWORD_VALIDATORS = [
#     {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
#     {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
#     {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
#     {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
# ]

# # ------------------------
# # Internationalization
# # ------------------------
# LANGUAGE_CODE = "en-us"
# TIME_ZONE = "UTC"
# USE_I18N = True
# USE_TZ = True

# # ------------------------
# # Static files
# # ------------------------
# STATIC_URL = "static/"

# # ------------------------
# # Default primary key field type
# # ------------------------
# DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"



from pathlib import Path
import os
import dotenv

BASE_DIR = Path(__file__).resolve().parent.parent

dotenv.load_dotenv()

SECRET_KEY = os.getenv("SECRET_KEY", "unsafe-default")
DEBUG = os.getenv("DEBUG", "False") == "True"
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "*").split(",")

INSTALLED_APPS = [
    "provision",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.facebook",
    "rest_framework",
    "rest_framework_simplejwt",
    "drf_yasg",
]

SITE_ID = 1

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "EXCEPTION_HANDLER": "provision.utils.custom_exception_handler.custom_exception_handler",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_VERSION": "v1",
    "ALLOWED_VERSIONS": ["v1", "v2"],
    "VERSION_PARAM": "version",
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "app_django.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}

LOGIN_REDIRECT_URL = "/swagger/"

WSGI_APPLICATION = "app_django.wsgi.application"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        "HOST": os.getenv("POSTGRES_HOST", "db"),
        "PORT": os.getenv("POSTGRES_PORT", "5432"),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
